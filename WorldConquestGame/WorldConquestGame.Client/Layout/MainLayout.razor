@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page">
    <main>
        <div class="top-row px-4">
            <h1 class="page-title">
                <i class="bi bi-globe"></i> World Conquest
            </h1>
            @if (ShouldShowContinentButtons)
            {
                <nav class="continent-buttons ms-3">
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("Africa")' aria-label="Zoom to Africa">
                        <i class="bi bi-map-fill"></i> Africa
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("Europe")' aria-label="Zoom to Europe">
                        <i class="bi bi-map-fill"></i> Europe
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("Asia")' aria-label="Zoom to Asia">
                        <i class="bi bi-map-fill"></i> Asia
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("North America")' aria-label="Zoom to North America">
                        <i class="bi bi-map-fill"></i> N. America
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("South America")' aria-label="Zoom to South America">
                        <i class="bi bi-map-fill"></i> S. America
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-1" @onclick='() => ZoomToContinent("Oceania")' aria-label="Zoom to Oceania">
                        <i class="bi bi-map-fill"></i> Oceania
                    </button>
                    <button class="btn btn-sm geo-continent-btn me-2" @onclick='() => ZoomToContinent("Antarctica")' aria-label="Zoom to Antarctica">
                        <i class="bi bi-map-fill"></i> Antarctica
                    </button>
                    <button class="btn btn-sm geo-reset-btn" @onclick="ResetAndGoToMap" aria-label="Reset saved map">
                        <i class="bi bi-arrow-clockwise"></i> Reset
                    </button>
                </nav>
            }
            <div class="nav-links">
                <a href="map" class="geo-nav-link conquest">
                    <i class="bi bi-crosshair"></i> Conquest
                </a>
                <a href="normal-map" class="geo-nav-link learn">
                    <i class="bi bi-book"></i> Learn
                </a>
            </div>
        </div>

        @code {
            private bool ShouldShowContinentButtons
            {
                get
                {
                    try
                    {
                        var rel = NavigationManager.ToBaseRelativePath(NavigationManager.Uri)?.TrimEnd('/') ?? string.Empty;
                        return !string.Equals(rel, "normal-map", StringComparison.OrdinalIgnoreCase);
                    }
                    catch
                    {
                        return true;
                    }
                }
            }

            private async Task ZoomToContinent(string continent)
            {
                // If we're not already on the map page, store the requested continent in sessionStorage
                // and navigate to /map. The map will read the pending value and apply the zoom on init.
                var isOnMap = NavigationManager.Uri?.EndsWith("/map", StringComparison.OrdinalIgnoreCase) == true;
                try
                {
                    if (isOnMap)
                    {
                        await JS.InvokeVoidAsync("mapInterop.zoomToContinent", continent);
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("sessionStorage.setItem", "zoomToContinent", continent);
                        NavigationManager.NavigateTo("/map");
                    }
                }
                catch
                {
                    // Fallback: store request and navigate to map so it will be applied on init
                    await JS.InvokeVoidAsync("sessionStorage.setItem", "zoomToContinent", continent);
                    NavigationManager.NavigateTo("/map");
                }
            }

            private async Task ResetAndGoToMap()
            {
                try
                {
                    // Request the map page to perform a reset on load
                    await JS.InvokeVoidAsync("sessionStorage.setItem", "resetMap", "1");
                }
                catch { }
                NavigationManager.NavigateTo("/map");
            }

            // Subscribe to location changes so the layout can re-render when route changes
            protected override void OnInitialized()
            {
                NavigationManager.LocationChanged += OnLocationChanged;
            }

            private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
            {
                // Re-render to update button visibility
                InvokeAsync(StateHasChanged);
            }

            public void Dispose()
            {
                NavigationManager.LocationChanged -= OnLocationChanged;
            }
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>