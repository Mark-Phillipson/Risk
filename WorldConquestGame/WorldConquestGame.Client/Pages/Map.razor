@page "/map"
@using WorldConquestGame.Client.Pages
@inject IJSRuntime JS
@inject WorldConquestGame.Client.Services.GameService GameService
@inject WorldConquestGame.Client.Services.StorageService StorageService

<div class="map-page">
    <div id="map" class="map"></div>
    <div style="position:absolute;top:0;left:0;bottom:0;z-index:2200;display:flex;align-items:stretch;">
        <div style="width:@(ShowCountries ? "320px" : "36px");height:100vh;background:white;border-right:1px solid #ddd;box-shadow:2px 0 6px rgba(0,0,0,0.08);overflow:hidden;transition:width 200ms ease;">
            <div style="display:flex;flex-direction:column;height:100%;">
                <div style="display:flex;align-items:center;justify-content:flex-end;padding:6px;border-bottom:1px solid rgba(0,0,0,0.06);">
                    <button class="btn btn-sm btn-outline-secondary" style="width:32px;height:32px;padding:0;display:flex;align-items:center;justify-content:center;" @onclick="() => ShowCountries = !ShowCountries">
                        @if (ShowCountries)
                        {
                            <span>&#x25C0;</span> @* left-pointing chevron to collapse *@
                        }
                        else
                        {
                            <span>&#x25B6;</span> @* right-pointing chevron to expand *@
                        }
                    </button>
                </div>

                <div style="padding:8px;flex:1 1 auto;overflow:auto;">
                    @if (ShowCountries)
                    {
                        <Countries Title="Countries" />
                    }
                </div>
            </div>
        </div>
    </div>
    <!-- Reset button removed from map overlay to avoid covering map controls -->

    <!-- Render QuestionPanel locally on the map page for visibility -->
    <QuestionPanel />
</div>

@code {
    private DotNetObjectReference<Map>? objRef;
    private bool ShowCountries = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            // Disable persistent country labels on this map page; rely on color only.
            try { await JS.InvokeVoidAsync("sessionStorage.setItem", "showCountryLabels", "false"); } catch { }
            await JS.InvokeVoidAsync("mapInterop.initMap", "map", "data/countries.geojson", objRef);

            // After map loads, attempt to read persisted countries and re-apply styles
            // We wait briefly to allow the geo layer to fully register layers and centroids in JS
            try
            {
                // Check if a reset was requested from the layout (sessionStorage.resetMap)
                try
                {
                    var resetReq = await JS.InvokeAsync<string>("sessionStorage.getItem", "resetMap");
                    if (!string.IsNullOrEmpty(resetReq))
                    {
                        // clear the flag and perform reset actions
                        await JS.InvokeVoidAsync("sessionStorage.removeItem", "resetMap");
                        await JS.InvokeVoidAsync("mapInterop.clearConquered");
                        try { await StorageService.ClearCountriesAsync(); } catch { }
                    }
                }
                catch { }

                var persisted = await StorageService.LoadCountriesAsync();
                // log what we loaded for debugging
                await JS.InvokeVoidAsync("console.log", "Map: loaded persisted countries:", persisted == null ? 0 : persisted.Count,
                persisted);
                if (persisted != null && persisted.Count > 0)
                {
                    // merge into in-memory model
                    GameService.MergePersistedCountries(persisted);

                    // For debugging: build detailed lists of ids and colors we'll send to JS
                    var ids = new List<string>();
                    var colors = new List<string>();
                    foreach (var c in persisted.Where(p => p.IsConquered && !string.IsNullOrEmpty(p.Code)))
                    {
                        ids.Add(c.Code!);
                        colors.Add(string.IsNullOrEmpty(c.Color) ? "#ffcc00" : c.Color!);
                    }

                    // Log the exact payload we will send to mapInterop
                    await JS.InvokeVoidAsync("console.log", "Map: restoring conquered countries, ids:", ids, "colors:", colors);

                    if (ids.Count > 0)
                    {
                        // call JS to apply styles for multiple countries â€” pass per-id colors array
                        var result = await JS.InvokeAsync<object?>("mapInterop.setCountryConqueredAny", ids.ToArray(), colors.ToArray());
                        await JS.InvokeVoidAsync("console.log", "Map: mapInterop.setCountryConqueredAny returned:", result);
                    }
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", "Map: failed to restore persisted countries", ex.Message);
            }
        }
    }

    [JSInvokable]
    public Task OnCountryClicked(string id)
    {
        // id will be code or name from GeoJSON properties
        Console.WriteLine($"Map.OnCountryClicked called with id={id}");
        GameService.RaiseCountryClicked(id);
        return Task.CompletedTask;
    }

    private async Task ResetMap()
    {
        try
        {
            // Clear JS map visual state
            await JS.InvokeVoidAsync("mapInterop.clearConquered");
        }
        catch { }

        try
        {
            // Clear persisted storage
            await StorageService.ClearCountriesAsync();
        }
        catch { }

        // Optionally reload the page to reinitialize map cleanly
        try { await JS.InvokeVoidAsync("location.reload"); } catch { }
    }


    public void Dispose()
    {
        objRef?.Dispose();
    }
}