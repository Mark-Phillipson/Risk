name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    # Skip runs triggered by the Actions bot to prevent retrigger loops
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    name: Build and Deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Diagnose repo layout (helpful when project file not found)
        run: |
          echo "PWD: $(pwd)"
          echo "Top-level files and folders:"
          ls -la || true
          echo "Looking for any .csproj files (max depth 3):"
          find . -maxdepth 3 -type f -name '*.csproj' -print || true

      - name: Confirm client project location (SWA will build this)
        run: |
          echo "PWD: $(pwd)"
          echo "Client folder contents (WorldConquestGame/WorldConquestGame.Client):"
          ls -la WorldConquestGame/WorldConquestGame.Client || true
          echo "Project file:" 
          ls -la WorldConquestGame/WorldConquestGame.Client/*.csproj || true

      - name: Deploy to Azure Static Web Apps (let action build the app)
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Use the configured Victorious secret for the SWA deployment token
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_VICTORIOUS_DUNE_0AFCA7C03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations
          action: "upload"
          # We're uploading a pre-built artifact produced by the publish step above.
          # Instead of pre-building, let the SWA action build the Blazor client.
          # app_location is the client folder and app_artifact_location points to
          # the Blazor publish output produced by Oryx: bin/Release/net8.0/publish/wwwroot
          app_location: "WorldConquestGame/WorldConquestGame.Client"
          app_artifact_location: "bin/Release/net8.0/publish/wwwroot"
          # Force the build step to use dotnet publish (package.json exists so Oryx
          # may try to run a Node build). This runs inside app_location.
          app_build_command: 'dotnet publish -c Release -o bin/Release/net8.0/publish'
          api_location: "" # no Azure Functions API in this repo
          skip_app_build: false
